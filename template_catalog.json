[
  {
    "name": "c-code-react-runner",
    "language": "typescript",
    "frameworks": [
      "@dnd-kit",
      "@hookform/resolvers",
      "autoprefixer",
      "class-variance-authority",
      "cloudflare",
      "clsx",
      "cmdk",
      "date-fns",
      "framer-motion",
      "hono",
      "immer",
      "input-otp",
      "next",
      "postcss",
      "react",
      "recharts",
      "sonner",
      "tailwind",
      "tw-animate-css",
      "typescript",
      "vaul",
      "vite",
      "wrangler",
      "zod",
      "zustand",
      "@supadata/js"
    ],
    "description": {
      "selection": "# Template Selection\n\nModern React SPA starter\n\nUse when:\n- Client-side only apps with no backend persistence\n- Static apps, dashboards\n- Simple, fast Vite projects\n\nAvoid when:\n- SEO/SSR landing pages\n- Heavy backend/server needs\n- Data persistence of any kind is required on server side\n\nBuilt with:\n- React Router, ShadCN UI, Tailwind, Lucide Icons, ESLint, Vite",
      "usage": "# Usage\n\n## Built with\n- React Router 6, ShadCN UI, Tailwind, Lucide Icons, ESLint, Vite\n- Cloudflare Workers (serving/server-side when needed)\n\n## Restrictions\n- Tailwind: define custom colors in `tailwind.config.js` (not in `index.css`)\n\n## Styling\n- Responsive, accessible\n- Prefer ShadCN components; Tailwind utilities for custom parts\n- Icons from `lucide-react`\n- Error boundaries are already implemented\n\n## Animation\n- Use `framer-motion` for small interactions when needed\n\n## Components\n- Import from `@/components/ui/*` (ShadCN). Avoid reinventing components.\n\n## Example\n```tsx\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent } from '@/components/ui/card'\n\nexport function Example() {\n  return (\n    <Card className=\"max-w-sm\">\n      <CardContent className=\"p-4 flex gap-2\">\n        <Button>Click</Button>\n      </CardContent>\n    </Card>\n  )\n}\n```\n\n## Backend (optional)\n- If you add Worker routes, do it in `worker/index.ts`. Follow the existing pattern carefully to avoid breakage."
    }
  },
  {
    "name": "vite-cf-DO-KV-runner",
    "language": "typescript",
    "frameworks": [
      "@dnd-kit",
      "@hookform/resolvers",
      "autoprefixer",
      "class-variance-authority",
      "cloudflare",
      "clsx",
      "cmdk",
      "date-fns",
      "framer-motion",
      "hono",
      "immer",
      "input-otp",
      "next",
      "postcss",
      "react",
      "recharts",
      "sonner",
      "tailwind",
      "tw-animate-css",
      "typescript",
      "vaul",
      "vite",
      "wrangler",
      "zod",
      "zustand"
    ],
    "description": {
      "selection": "# Template Selection\n\nDeprecated. Use only for backward compatibility with older apps.\n\nPrefer: `vite-cf-DO-v2-runner` (multi-entity DO storage) or `vite-cf-DO-runner` (single DO).",
      "usage": "# Usage\n\n> Deprecated template. Prefer `vite-cf-DO-v2-runner` or `vite-cf-DO-runner`.\n\n## Overview\nWorkers + React with Durable Objects (DO) + KV. Type-safe APIs with mock fallback.\n- Frontend: React Router 6 + TypeScript + ShadCN UI\n- Backend: Hono Worker with DO + KV\n- Shared: Types in `shared/types.ts`\n\n## ⚠️ IMPORTANT: Demo Content\n**The existing demo pages, mock data, and API endpoints are FOR TEMPLATE UNDERSTANDING ONLY.**\n- Replace `HomePage.tsx` and `DemoPage.tsx` with actual application pages\n- Remove or replace mock data in `shared/mock-data.ts` with real data structures\n- Remove or replace demo API endpoints (`/api/demo`, `/api/seed`) and implement actual business logic\n- The counter example is just to show DO patterns - replace with real functionality\n\n## Tech\n- React Router 6, ShadCN UI, Tailwind, Lucide, Hono, TypeScript\n\n## Development Restrictions\n- **Tailwind Colors**: Hardcode custom colors in `tailwind.config.js`, NOT in `index.css`\n- **Components**: Use existing ShadCN components instead of writing custom ones\n- **Icons**: Import from `lucide-react` directly\n- **Error Handling**: ErrorBoundary components are pre-implemented\n- **Worker Patterns**: Follow exact patterns in `worker/index.ts` to avoid breaking functionality\n\n## Styling\n- Responsive, accessible\n- Prefer ShadCN components; Tailwind for layout/spacing/typography\n\n## Code Organization\n\n### Frontend Structure\n- `src/pages/HomePage.tsx` - Homepage for user to see while you are working on the app\n- `src/pages/DemoPage.tsx` - Main demo showcasing KV + DO features\n- `src/components/ThemeToggle.tsx` - Theme switching component\n- `src/hooks/useTheme.ts` - Theme management hook\n\n### Backend Structure\n- `worker/index.ts` - Worker entrypoint (registers routes; do not change patterns)\n- `worker/userRoutes.ts` - Add routes here\n- `worker/durableObject.ts` - DO methods (e.g., counter)\n- `worker/core-utils.ts` - Core types/utilities (do not modify)\n\n### Shared\n- `shared/types.ts` - API/data types\n- `shared/mock-data.ts` - Demo-only; replace\n- `shared/seed-utils.ts` - Demo-only; remove when not needed\n\n## API Patterns\n\n### Adding Endpoints\nFollow this pattern in `worker/userRoutes.ts`:\n```typescript\n// KV endpoint with mock fallback\napp.get('/api/my-data', async (c) => {\n  const items = await c.env.KVStore.get('my_key');\n  const data: MyType[] = items ? JSON.parse(items) : MOCK_FALLBACK;\n  return c.json({ success: true, data } satisfies ApiResponse<MyType[]>);\n});\n\n// Durable Object endpoint\napp.post('/api/counter/action', async (c) => {\n  const stub = c.env.GlobalDurableObject.get(c.env.GlobalDurableObject.idFromName(\"global\"));\n  const data = await stub.myMethod() as number;\n  return c.json({ success: true, data } satisfies ApiResponse<number>);\n});\n```\n\n### Type Safety\n- Return `ApiResponse<T>`\n- Share types via `shared/types.ts`\n- Mock data must match types\n\n## Bindings\nCRITICAL: Only these bindings exist:\n- `GlobalDurableObject` (stateful operations)\n- `KVStore` (persistence)\n\n## Frontend\n- Call `/api/*` endpoints directly\n- Handle loading/errors; use shared types"
    }
  },
  {
    "name": "vite-cf-DO-v2-runner",
    "language": "typescript",
    "frameworks": [
      "@dnd-kit",
      "@hookform/resolvers",
      "autoprefixer",
      "class-variance-authority",
      "cloudflare",
      "clsx",
      "cmdk",
      "date-fns",
      "framer-motion",
      "hono",
      "immer",
      "input-otp",
      "next",
      "postcss",
      "react",
      "recharts",
      "sonner",
      "tailwind",
      "tw-animate-css",
      "typescript",
      "vaul",
      "vite",
      "zod",
      "zustand"
    ],
    "description": {
      "selection": "# Template Selection\n\nGeneral-purpose multi-entity storage on Cloudflare Workers using one Durable Object (DO) as the storage backend. The DO is wrapped so multiple entities (users, chats, orgs, etc.) can persist data via simple APIs.\n\nUse when:\n- Backend-heavy apps with multiple entities and server-side persistence\n- Chats, ecommerce, dashboards\n- Cost-effective persistence without KV\n- General purpose storage for any multi-entity data\n\nAvoid when:\n- Static/SPAs with no backend\n- SEO/SSR landing pages\n- You need SSR or DO features like alarms/direct DO access\n\nNote: No direct DO access. DO is storage-only; no alarms or extra DO features.\n\nBuilt with:\n- React Router, ShadCN UI, Tailwind, Lucide Icons, ESLint, Vite\n- Cloudflare Workers + a single DO for persistence",
      "usage": "# Usage\n\n## Overview\nCloudflare Workers + React. Storage via a single Durable Object (DO) wrapped to support multiple entities.\n- Frontend: React Router 6 + TypeScript + ShadCN UI\n- Backend: Hono Worker; persistence through one DO (no direct DO access)\n- Shared: Types in `shared/types.ts`\n\n## ⚠️ IMPORTANT: Demo Content\n**The existing demo pages, mock data, and API endpoints are FOR TEMPLATE UNDERSTANDING ONLY.**\n- Replace `HomePage.tsx` and `DemoPage.tsx` with actual application pages\n- Remove or replace mock data in `shared/mock-data.ts` with real data structures\n- Remove or replace demo API endpoints (`/api/demo`, `/api/counter`) and implement actual business logic\n- The counter and demo items examples show DO patterns - replace with real functionality\n\n## Tech\n- React Router 6, ShadCN UI, Tailwind, Lucide, Hono, TypeScript\n\n## Development Restrictions\n- **Tailwind Colors**: Hardcode custom colors in `tailwind.config.js`, NOT in `index.css`\n- **Components**: Use existing ShadCN components instead of writing custom ones\n- **Icons**: Import from `lucide-react` directly\n- **Error Handling**: ErrorBoundary components are pre-implemented\n- **Worker Patterns**: Follow exact patterns in `worker/index.ts` to avoid breaking functionality\n- **CRITICAL**: You CANNOT modify `wrangler.jsonc` - only use the single `GlobalDurableObject` binding\n\n## Styling\n- Responsive, accessible\n- Prefer ShadCN components; Tailwind for layout/spacing/typography\n- Use framer-motion sparingly for micro-interactions\n\n## Code Organization\n\n### Frontend Structure\n- `src/pages/HomePage.tsx` - Homepage for user to see while you are working on the app\n- `src/pages/DemoPage.tsx` - Main demo showcasing Durable Object features\n- `src/components/ThemeToggle.tsx` - Theme switching component\n- `src/hooks/useTheme.ts` - Theme management hook\n\n### Backend Structure\n- `worker/index.ts` - Worker entrypoint (registers routes; do not change patterns)\n- `worker/user-routes.ts` - Add routes here using existing helpers\n- `worker/core-utils.ts` - DO + core index/entity utilities and HTTP helpers (**DO NOT MODIFY**)\n- `worker/entities.ts` - Demo entities (users, chats)\n\n### Shared\n- `shared/types.ts` - API/data types\n- `shared/mock-data.ts` - Demo-only; replace\n\n## API Patterns\n\n### Adding Endpoints (use Entities)\nIn `worker/user-routes.ts`, use entity helpers from `worker/entities.ts` and response helpers from `worker/core-utils.ts`.\n```ts\nimport { ok, bad } from './core-utils';\nimport { UserEntity } from './entities';\napp.post('/api/users', async (c) => {\n  const { name } = await c.req.json();\n  if (!name?.trim()) return bad(c, 'name required');\n  const user = await UserEntity.create(c.env, { id: crypto.randomUUID(), name: name.trim() });\n  return ok(c, user);\n});\n```\n\n<!-- No direct DO methods in this template; use Entities/Index helpers instead. -->\n\n### Type Safety\n- Always return `ApiResponse<T>`\n- Share types via `shared/types.ts`\n\n## Bindings\nCRITICAL: only `GlobalDurableObject` is available for stateful ops\n**IMPORTANT: You are NOT ALLOWED to edit/add/remove ANY worker bindings OR touch wrangler.jsonc/wrangler.toml. Build your application around what is already provided.**\n\n**YOU CANNOT**:\n- Modify `wrangler.jsonc` \n- Add new Durable Objects or KV namespaces\n- Change binding names or add new bindings\n\n## Storage Patterns\n- Use Entities/Index utilities from `core-utils.ts`; avoid raw DO calls\n- Atomic ops via provided helpers\n\n## Frontend\n- Call `/api/*` endpoints directly\n- Handle loading/errors; use shared types"
    }
  },
  {
    "name": "vite-supadata-runner",
    "language": "typescript",
    "frameworks": [
      "@dnd-kit",
      "@hookform/resolvers",
      "@modelcontextprotocol",
      "agents",
      "autoprefixer",
      "class-variance-authority",
      "cloudflare",
      "clsx",
      "cmdk",
      "date-fns",
      "framer-motion",
      "hono",
      "immer",
      "input-otp",
      "mcp-client",
      "mcp-remote",
      "next",
      "openai",
      "postcss",
      "react",
      "recharts",
      "sonner",
      "tailwind",
      "tw-animate-css",
      "typescript",
      "vaul",
      "vite",
      "zod",
      "zustand"
    ],
    "description": {
      "selection": "# Template Selection Guidelines\n\nThis template provides a production-ready AI agent chatbot built with Cloudflare Agents SDK, featuring intelligent tool usage and multi-model support as well as control plane durable objects for session management.\n\n* Use this template when you need:\n  * AI chat applications with intelligent tool/function calling capabilities\n  * Agent-based chatbots using production Cloudflare MCP servers\n  * Multi-model AI support (GPT-4o, Gemini 2.0/2.5, Claude Opus 4)\n  * Production-ready MCP integration with official TypeScript SDK\n  * Real-time conversation management\n  * Real-time streaming chat with AI Agents\n  * Advanced AI Agents capabilities and AI based applications like image generation, chat bots etc\n\n* Do not use it for:\n  * Simple static websites without AI functionality\n  * Applications that don't need AI capabilities\n  * Projects requiring complex multi-user chat rooms or real-time streaming\n  * Simple question-answer bots without tool requirements\n\n**IMPORTANT NOTE: Only use this template if you NEED AI/LLM capabilities as core of your application. If the requirement is for durable objects, there are much better templates like 'vite-cf-DO-runner' or 'vite-cf-DO-v2-runner'**\n\n* Built with:\n  * **Cloudflare Agents SDK** for stateful agent management with Durable Objects\n  * **Official MCP TypeScript SDK** for proper protocol implementation\n  * **React + Vite** for fast, modern frontend development\n  * **OpenAI SDK** for AI model integration via Cloudflare AI Gateway\n  * **Production Cloudflare MCP Servers** (Documentation and Browser)\n  * **Tailwind CSS** with glass morphism effects and responsive design\n  * **Framer Motion** for smooth chat animations and loading states\n  * **Shadcn/UI** components for polished interface elements\n  * **TypeScript** for type safety and extensible architecture\n  * **Validated MCP Integration** using official schemas and transports",
      "usage": "# Usage Instructions\n\nYou can start customizing the template frontend by modifying `src/App.tsx`. The page auto-updates as you edit the file.\n\nThe chat API is powered by Cloudflare Agents (Which is a wrapper on Durable Objects) and accessible through the worker at `/api/chat/:sessionId/*` routes defined in `worker/userRoutes.ts`. **Use it!**\n\nThe agent system uses Durable Objects for persistent state management and conversation history. `/api/chat/:sessionId/*` should be used without modifications for any conversation support. There is also a control plane durable object for session management name AppController.\n\nThere are already several models presupplied with the template along with proper configuration (apikeys and base url). You should develop using them instead of adding mock methods.\n\n- Built with:\n  * **React + Vite** for fast frontend development with hot module replacement\n  * **Cloudflare Agents SDK** for stateful agent management with persistent Durable Objects\n  * **Model Context Protocol (MCP)** client for real server integration\n  * **OpenAI SDK** for AI model integration via Cloudflare AI Gateway\n  * **Production MCP Servers** including Cloudflare Bindings and Observability\n  * **Tailwind CSS** for utility-first styling with glass morphism effects\n  * **Framer Motion** for smooth chat animations and loading states\n  * **Lucide Icons** (React) for modern, consistent iconography\n  * **Shadcn/UI** (v2.3.0) for accessible chat components built on Radix UI primitives\n  * **TypeScript** for type safety and extensible architecture\n  * **Durable Objects** for control plane for database or session management\n\n- Agent Features:\n  * **Real MCP Integration**: Connects to actual MCP servers, not simulated implementations\n  * **Cloudflare MCP Servers**: Direct integration with Cloudflare Bindings and Observability servers\n  * **Intelligent Tool Usage**: AI automatically detects when to use tools (D1, R2, Workers, Web browsing)\n  * **Multi-Model Support**: Switch between various models\n  * **Production Tools**: Query D1 databases, manage R2 buckets, get Worker analytics\n  * **Web Browsing**: Browse and extract content from web pages through MCP server\n  * **Persistent Conversations**: Maintains chat history using Durable Objects state in Cloudflare Agents.\n  * **Tool Visualization**: Shows which tools were used with results in the chat interface\n\n- Adding New MCP Servers:\n  * **Step 1**: Add server configuration to `initializeCloudflareServers()` in `worker/mcp-client.ts`\n  * **Step 2**: Tools are automatically discovered and registered from MCP server definitions\n  * **Step 3**: The system automatically routes tool calls to appropriate MCP servers\n  * **Real Protocol**: Uses actual MCP protocol for server communication, not simulation\n\n- Environment Variables:\n  * **CF_AI_BASE_URL**: Cloudflare AI Gateway base URL (required)\n  * **CF_AI_API_KEY**: API key for AI Gateway access (required)\n  * **CHAT_AGENT**: Durable Object binding name for agent persistence\n\n- Restrictions:\n  * **Environment variables**: CF_AI_BASE_URL and CF_AI_API_KEY must be configured\n  * **API keys**: Never expose API keys to client-side - they're server-side only in worker\n  * **Tool Safety**: Tool functions should validate inputs and handle errors gracefully\n  * **Use Agents SDK patterns**: Extend Agent class, use setState for persistence\n\n- Styling:\n  * Must generate **fully responsive** and beautiful UI with agent-focused design\n  * Use Shadcn preinstalled components rather than writing custom ones when possible\n  * Use **Tailwind's spacing, layout, and typography utilities** for all components\n  * Include tool interaction indicators and loading states for better UX\n\n- Components:\n  * All Shadcn components are available and can be imported from `@/components/ui/...`\n  * Current chat uses: `Button`, `Input`, `Card`, `Select`, `Badge` for the interface\n  * Tool results are displayed with badges and icons from the UI library\n  * Do not write custom components if shadcn components are available\n  * Icons from Lucide should be imported directly from `lucide-react`\n\n- Animation:\n  * Use `framer-motion`'s `motion` components for chat message animations\n  * Animate tool usage indicators, model selection, and loading states\n  * You can integrate variants and transitions using Tailwind utility classes alongside motion props\n\n- Worker Architecture (Backend, APIs):\n  * **`worker/agent.ts`**: Main agent class \n  * **`worker/userRoutes.ts`**: HTTP routing for agent API and session managementå\n  * **`worker/chat.ts`**: OpenAI integration and conversation logic  \n  * **`worker/mcp-client.ts`**: MCP client for real server integration\n  * **`worker/tools.ts`**: Tool routing and MCP server coordination\n  * **`worker/config.ts`**: Centralized configuration\n  * **`worker/types.ts`**: TypeScript interfaces and type definitions\n  * **`worker/app-controller.ts`**: Control plane durable object for session management\n\n---\n\nThe system automatically:\n- Connects to MCP servers using proper transport\n- Uses official MCP SDK schemas for validation\n- Discovers tools with proper error handling\n- Routes tool calls to the correct server\n- Parses results using MCP result schemas\n\nComponents available:\n```sh\n$ ls -1 src/components/ui\naccordion.tsx\nalert-dialog.tsx\nalert.tsx\naspect-ratio.tsx\navatar.tsx\nbadge.tsx\nbreadcrumb.tsx\nbutton.tsx\ncalendar.tsx\ncard.tsx\ncarousel.tsx\nchart.tsx\ncheckbox.tsx\ncollapsible.tsx\ncommand.tsx\ncontext-menu.tsx\ndialog.tsx\ndrawer.tsx\ndropdown-menu.tsx\nform.tsx\nhover-card.tsx\ninput-otp.tsx\ninput.tsx\nlabel.tsx\nmenubar.tsx\nnavigation-menu.tsx\npagination.tsx\npopover.tsx\nprogress.tsx\nradio-group.tsx\nresizable.tsx\nscroll-area.tsx\nselect.tsx\nseparator.tsx\nsheet.tsx\nsidebar.tsx\nskeleton.tsx\nslider.tsx\nsonner.tsx\nswitch.tsx\ntable.tsx\ntabs.tsx\ntextarea.tsx\ntoast.tsx\ntoggle-group.tsx\ntoggle.tsx\ntooltip.tsx\n```\n\n# Important Notes\n- Conversations and persistence are already handled by the template. Utilize existing utilities and apis to build something greater.\n- For example, to build a chatgpt clone - You just need to build the frontend and use existing APIs without modifying them.\n\n# Available bindings:\n**Only The following bindings are to be used in the project! Do not use any other bindings or remove/replace any of the bindings**\n- `CHAT_AGENT`: A durable object binding for the chat agent, but can be extended and used for other agentic purposes\n- `APP_CONTROLLER`: A durable object binding for the app controller, but can be extended and used for other agentic purposes\n**IMPORTANT: You are NOT ALLOWED to edit/add/remove ANY worker bindings OR touch wrangler.jsonc/wrangler.toml. Build your application around what is already provided.**\n\n# IMPORTANT NOTE: You must inform the user that although this project has AI capaibilities, There is a limit on the number of requests that can be made to the AI servers across all user apps in a given time period. \nAdd the above note in an appropriate and visible location in the app - like in the footer or in the chat interface or as a modal"
    }
  },
  {
    "name": "vite-cf-DO-runner",
    "language": "typescript",
    "frameworks": [
      "@dnd-kit",
      "@hookform/resolvers",
      "autoprefixer",
      "class-variance-authority",
      "cloudflare",
      "clsx",
      "cmdk",
      "date-fns",
      "framer-motion",
      "hono",
      "immer",
      "input-otp",
      "next",
      "postcss",
      "react",
      "recharts",
      "sonner",
      "tailwind",
      "tw-animate-css",
      "typescript",
      "vaul",
      "vite",
      "zod",
      "zustand"
    ],
    "description": {
      "selection": "# Template Selection\n\nSingle Durable Object (DO) app on Cloudflare Workers. Minimal setup that uses one global DO for persistence and DO features.\n\nUse when:\n- You need server-side state with one global DO\n- Real-time/stateful services, dashboards, counters\n\nAvoid when:\n- Static/SPAs with no backend\n- SEO/SSR landing pages\n- You only need database-like storage across many entities (see DO v2 runner)\n\nBuilt with:\n- React Router, ShadCN UI, Tailwind, Lucide Icons, ESLint, Vite\n- Cloudflare Workers + single DO for persistence",
      "usage": "# Usage\n\n## Overview\nCloudflare Workers + React. Single global Durable Object (DO) for all persistence and DO features.\n- Frontend: React Router 6 + TypeScript + ShadCN UI\n- Backend: Hono Worker with one DO\n- Shared: Types in `shared/types.ts`\n\n## ⚠️ IMPORTANT: Demo Content\n**The existing demo pages, mock data, and API endpoints are FOR TEMPLATE UNDERSTANDING ONLY.**\n- Replace `HomePage.tsx` and `DemoPage.tsx` with actual application pages\n- Remove or replace mock data in `shared/mock-data.ts` with real data structures\n- Remove or replace demo API endpoints (`/api/demo`, `/api/counter`) and implement actual business logic\n- The counter and demo items examples show DO patterns - replace with real functionality\n\n## Tech\n- React Router 6, ShadCN UI, Tailwind, Lucide, Hono, TypeScript\n\n## Development Restrictions\n- **Tailwind Colors**: Hardcode custom colors in `tailwind.config.js`, NOT in `index.css`\n- **Components**: Use existing ShadCN components instead of writing custom ones\n- **Icons**: Import from `lucide-react` directly\n- **Error Handling**: ErrorBoundary components are pre-implemented\n- **Worker Patterns**: Follow exact patterns in `worker/index.ts` to avoid breaking functionality\n- **CRITICAL**: You CANNOT modify `wrangler.jsonc` - only use the single `GlobalDurableObject` binding\n\n## Styling\n- Responsive, accessible\n- Prefer ShadCN components; Tailwind for layout/spacing/typography\n\n## Code Organization\n\n### Frontend Structure\n- `src/pages/HomePage.tsx` - Homepage for user to see while you are working on the app\n- `src/pages/DemoPage.tsx` - Main demo showcasing Durable Object features\n- `src/components/ThemeToggle.tsx` - Theme switching component\n- `src/hooks/useTheme.ts` - Theme management hook\n\n### Backend Structure\n- `worker/index.ts` - Worker entrypoint (registers routes; do not change patterns)\n- `worker/userRoutes.ts` - Add routes here\n- `worker/durableObject.ts` - DO methods (e.g., counter, demo items)\n- `worker/core-utils.ts` - Core types/utilities (do not modify)\n\n### Shared\n- `shared/types.ts` - API/data types\n- `shared/mock-data.ts` - Demo-only; replace\n\n## API Patterns\n\n### Adding Endpoints\nFollow this pattern in `worker/userRoutes.ts`:\n```typescript\n// Durable Object endpoint for data retrieval\napp.get('/api/my-data', async (c) => {\n  const stub = c.env.GlobalDurableObject.get(c.env.GlobalDurableObject.idFromName(\"global\"));\n  const data = await stub.getMyData();\n  return c.json({ success: true, data } satisfies ApiResponse<MyType[]>);\n});\n\n// Durable Object endpoint for data modification\napp.post('/api/my-data', async (c) => {\n  const body = await c.req.json() as MyType;\n  const stub = c.env.GlobalDurableObject.get(c.env.GlobalDurableObject.idFromName(\"global\"));\n  const data = await stub.addMyData(body);\n  return c.json({ success: true, data } satisfies ApiResponse<MyType[]>);\n});\n```\n\n### Durable Object Methods Pattern\nAdd methods to `GlobalDurableObject` class in `worker/durableObject.ts`:\n```typescript\nasync getMyData(): Promise<MyType[]> {\n  const items = await this.ctx.storage.get(\"my_data_key\");\n  if (items) {\n    return items as MyType[];\n  }\n  // Initialize with default data if not exists\n  const defaultData = DEFAULT_MY_DATA;\n  await this.ctx.storage.put(\"my_data_key\", defaultData);\n  return defaultData;\n}\n\nasync addMyData(item: MyType): Promise<MyType[]> {\n  const items = await this.getMyData();\n  const updated = [...items, item];\n  await this.ctx.storage.put(\"my_data_key\", updated);\n  return updated;\n}\n```\n\n### Type Safety\n- Return `ApiResponse<T>`\n- Share types via `shared/types.ts`\n- DO methods must be typed\n\n## Bindings\nCRITICAL: only `GlobalDurableObject` is available for stateful ops\n**IMPORTANT: You are NOT ALLOWED to edit/add/remove ANY worker bindings OR touch wrangler.jsonc/wrangler.toml. Build your application around what is already provided.**\n\n**YOU CANNOT**:\n- Modify `wrangler.jsonc` \n- Add new Durable Objects or KV namespaces\n- Change binding names or add new bindings\n## Storage Patterns\n- Use unique keys per dataset (e.g. `counter_value`, `demo_items`)\n- Initialize data on first access as needed\n- Use atomic operations for consistency\n\n## Frontend\n- Call `/api/*` directly\n- Handle loading/errors; use shared types"
    }
  },
  {
    "name": "c-code-next-runner",
    "language": "typescript",
    "frameworks": [
      "@dnd-kit",
      "@hookform/resolvers",
      "autoprefixer",
      "class-variance-authority",
      "cloudflare",
      "clsx",
      "cmdk",
      "critters",
      "date-fns",
      "framer-motion",
      "immer",
      "input-otp",
      "next",
      "postcss",
      "react",
      "recharts",
      "sonner",
      "swc",
      "swr",
      "tailwind",
      "typescript",
      "vaul",
      "wrangler",
      "zod",
      "zustand"
    ],
    "description": {
      "selection": "# Template Selection Guidelines\n\nThis template offers a streamlined and performant foundation for building beautiful, responsive landing pages with modern animations and iconography.\n\n* Use this template when you need:\n  * High-performance server-side heavy projects and dashboards\n  * Pages optimized for SEO with server-rendered content\n  * Responsive design with smooth scrolling and page transitions\n  * Easily customizable layouts for product launches, waitlists, or portfolios\n  * Design-first experiences with animation and interactivity\n\n* Do not use it for:\n  * Lightweight, mostly client side heavy projects\n  * Static pages\n\n* Built with:\n  * **Next.js (Page Router)** for hybrid static & server rendering, built-in SEO, and routing\n  * **Tailwind CSS** for rapid UI development with utility-first styling\n  * **Lucide Icons** for sleek, consistent iconography\n  * **Framer Motion** for intuitive, production-ready animations\n  * **TypeScript** and **ESLint** for type safety and code quality",
      "usage": "# Usage instructions\n\nYou can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.\n\nAPI routes can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.\n\nThe `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as API routes instead of React pages.\n\n- Built with:\n  * Next.js (Page Router) for hybrid static/server rendering and SEO optimization\n  * Tailwind CSS** for utility-first styling and rapid prototyping\n  * Lucide Icons** (React) for modern, consistent iconography\n  * Framer Motion** for smooth, production-ready animations\n  * ESLint and TypeScript for linting and type safety out of the box\n  * ShadCN UI** (v2.3.0) for customizable and accessible UI components built on Radix UI primitives\n\n- Restrictions:\n  * When including `tailwind.config.js`, **hardcode custom colors** directly in the config file – do **not** define them in `globals.css` unless specified\n  * Next.js cannot infer props for React Components, so YOU MUST provide default props\n  * Use Page router and not App router\n\n- Styling:\n  * Must generate **fully responsive** and accessible layouts\n  * Use Shadcn preinstalled components rather than writing custom ones when possible\n  * Use **Tailwind's spacing, layout, and typography utilities** for all components\n\n- Components:\n  * All Shadcn components are available and can be imported from @/components/ui/...\n  * Do not write custom components if shadcn components are available\n  * Icons from Lucide should be imported directly from `lucide-react`\n\n- Animation:\n  * Use `framer-motion`'s `motion` components to animate sections on scroll or page load\n  * You can integrate variants and transitions using Tailwind utility classes alongside motion props\n\n---\n\nComponents available:\n```sh\n$ ls -1 src/components/ui\naccordion.tsx\nalert-dialog.tsx\nalert.tsx\naspect-ratio.tsx\navatar.tsx\nbadge.tsx\nbreadcrumb.tsx\nbutton.tsx\ncalendar.tsx\ncard.tsx\ncarousel.tsx\nchart.tsx\ncheckbox.tsx\ncollapsible.tsx\ncommand.tsx\ncontext-menu.tsx\ndialog.tsx\ndrawer.tsx\ndropdown-menu.tsx\nform.tsx\nhover-card.tsx\ninput-otp.tsx\ninput.tsx\nlabel.tsx\nmenubar.tsx\nnavigation-menu.tsx\npagination.tsx\npopover.tsx\nprogress.tsx\nradio-group.tsx\nresizable.tsx\nscroll-area.tsx\nselect.tsx\nseparator.tsx\nsheet.tsx\nsidebar.tsx\nskeleton.tsx\nslider.tsx\nsonner.tsx\nswitch.tsx\ntable.tsx\ntabs.tsx\ntextarea.tsx\ntoast.tsx\ntoggle-group.tsx\ntoggle.tsx\ntooltip.tsx\n```\n\n### Usage Example\n\n```tsx file=\"src/components/Hero.tsx\"\n'use client'\n\nimport { motion } from 'framer-motion'\nimport { ArrowRightIcon } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\n\nexport function Hero() {\n  return (\n    <section className=\"w-full bg-white py-20 text-center\">\n      <motion.div \n        initial={{ opacity: 0, y: 30 }} \n        animate={{ opacity: 1, y: 0 }} \n        transition={{ duration: 0.6 }}\n        className=\"mx-auto max-w-2xl px-6\"\n      >\n        <h1 className=\"text-4xl font-bold tracking-tight sm:text-5xl\">\n          Build Stunning Landing Pages Fast\n        </h1>\n        <p className=\"mt-4 text-gray-600\">\n          A modern Next.js starter with Tailwind, Framer Motion, and Lucide.\n        </p>\n        <div className=\"mt-6 flex justify-center\">\n          <Button className=\"inline-flex items-center gap-2 rounded-md bg-black px-6 py-3 text-white hover:bg-gray-900 transition\">\n            Get Started\n            <ArrowRightIcon className=\"size-4\" />\n          </Button>\n        </div>\n      </motion.div>\n    </section>\n  )\n}\n```"
    }
  },
  {
    "name": "vite-cfagents-runner",
    "language": "typescript",
    "frameworks": [
      "@dnd-kit",
      "@hookform/resolvers",
      "@modelcontextprotocol",
      "agents",
      "autoprefixer",
      "class-variance-authority",
      "cloudflare",
      "clsx",
      "cmdk",
      "date-fns",
      "framer-motion",
      "hono",
      "immer",
      "input-otp",
      "mcp-client",
      "mcp-remote",
      "next",
      "openai",
      "postcss",
      "react",
      "recharts",
      "sonner",
      "tailwind",
      "tw-animate-css",
      "typescript",
      "vaul",
      "vite",
      "zod",
      "zustand"
    ],
    "description": {
      "selection": "# Template Selection Guidelines\n\nThis template provides a production-ready AI agent chatbot built with Cloudflare Agents SDK, featuring intelligent tool usage and multi-model support as well as control plane durable objects for session management.\n\n* Use this template when you need:\n  * AI chat applications with intelligent tool/function calling capabilities\n  * Agent-based chatbots using production Cloudflare MCP servers\n  * Multi-model AI support (GPT-4o, Gemini 2.0/2.5, Claude Opus 4)\n  * Production-ready MCP integration with official TypeScript SDK\n  * Real-time conversation management\n  * Real-time streaming chat with AI Agents\n  * Advanced AI Agents capabilities and AI based applications like image generation, chat bots etc\n\n* Do not use it for:\n  * Simple static websites without AI functionality\n  * Applications that don't need AI capabilities\n  * Projects requiring complex multi-user chat rooms or real-time streaming\n  * Simple question-answer bots without tool requirements\n\n**IMPORTANT NOTE: Only use this template if you NEED AI/LLM capabilities as core of your application. If the requirement is for durable objects, there are much better templates like 'vite-cf-DO-runner' or 'vite-cf-DO-v2-runner'**\n\n* Built with:\n  * **Cloudflare Agents SDK** for stateful agent management with Durable Objects\n  * **Official MCP TypeScript SDK** for proper protocol implementation\n  * **React + Vite** for fast, modern frontend development\n  * **OpenAI SDK** for AI model integration via Cloudflare AI Gateway\n  * **Production Cloudflare MCP Servers** (Documentation and Browser)\n  * **Tailwind CSS** with glass morphism effects and responsive design\n  * **Framer Motion** for smooth chat animations and loading states\n  * **Shadcn/UI** components for polished interface elements\n  * **TypeScript** for type safety and extensible architecture\n  * **Validated MCP Integration** using official schemas and transports",
      "usage": "# Usage Instructions\n\nYou can start customizing the template frontend by modifying `src/App.tsx`. The page auto-updates as you edit the file.\n\nThe chat API is powered by Cloudflare Agents (Which is a wrapper on Durable Objects) and accessible through the worker at `/api/chat/:sessionId/*` routes defined in `worker/userRoutes.ts`. **Use it!**\n\nThe agent system uses Durable Objects for persistent state management and conversation history. `/api/chat/:sessionId/*` should be used without modifications for any conversation support. There is also a control plane durable object for session management name AppController.\n\nThere are already several models presupplied with the template along with proper configuration (apikeys and base url). You should develop using them instead of adding mock methods.\n\n- Built with:\n  * **React + Vite** for fast frontend development with hot module replacement\n  * **Cloudflare Agents SDK** for stateful agent management with persistent Durable Objects\n  * **Model Context Protocol (MCP)** client for real server integration\n  * **OpenAI SDK** for AI model integration via Cloudflare AI Gateway\n  * **Production MCP Servers** including Cloudflare Bindings and Observability\n  * **Tailwind CSS** for utility-first styling with glass morphism effects\n  * **Framer Motion** for smooth chat animations and loading states\n  * **Lucide Icons** (React) for modern, consistent iconography\n  * **Shadcn/UI** (v2.3.0) for accessible chat components built on Radix UI primitives\n  * **TypeScript** for type safety and extensible architecture\n  * **Durable Objects** for control plane for database or session management\n\n- Agent Features:\n  * **Real MCP Integration**: Connects to actual MCP servers, not simulated implementations\n  * **Cloudflare MCP Servers**: Direct integration with Cloudflare Bindings and Observability servers\n  * **Intelligent Tool Usage**: AI automatically detects when to use tools (D1, R2, Workers, Web browsing)\n  * **Multi-Model Support**: Switch between various models\n  * **Production Tools**: Query D1 databases, manage R2 buckets, get Worker analytics\n  * **Web Browsing**: Browse and extract content from web pages through MCP server\n  * **Persistent Conversations**: Maintains chat history using Durable Objects state in Cloudflare Agents.\n  * **Tool Visualization**: Shows which tools were used with results in the chat interface\n\n- Adding New MCP Servers:\n  * **Step 1**: Add server configuration to `initializeCloudflareServers()` in `worker/mcp-client.ts`\n  * **Step 2**: Tools are automatically discovered and registered from MCP server definitions\n  * **Step 3**: The system automatically routes tool calls to appropriate MCP servers\n  * **Real Protocol**: Uses actual MCP protocol for server communication, not simulation\n\n- Environment Variables:\n  * **CF_AI_BASE_URL**: Cloudflare AI Gateway base URL (required)\n  * **CF_AI_API_KEY**: API key for AI Gateway access (required)\n  * **CHAT_AGENT**: Durable Object binding name for agent persistence\n\n- Restrictions:\n  * **Environment variables**: CF_AI_BASE_URL and CF_AI_API_KEY must be configured\n  * **API keys**: Never expose API keys to client-side - they're server-side only in worker\n  * **Tool Safety**: Tool functions should validate inputs and handle errors gracefully\n  * **Use Agents SDK patterns**: Extend Agent class, use setState for persistence\n\n- Styling:\n  * Must generate **fully responsive** and beautiful UI with agent-focused design\n  * Use Shadcn preinstalled components rather than writing custom ones when possible\n  * Use **Tailwind's spacing, layout, and typography utilities** for all components\n  * Include tool interaction indicators and loading states for better UX\n\n- Components:\n  * All Shadcn components are available and can be imported from `@/components/ui/...`\n  * Current chat uses: `Button`, `Input`, `Card`, `Select`, `Badge` for the interface\n  * Tool results are displayed with badges and icons from the UI library\n  * Do not write custom components if shadcn components are available\n  * Icons from Lucide should be imported directly from `lucide-react`\n\n- Animation:\n  * Use `framer-motion`'s `motion` components for chat message animations\n  * Animate tool usage indicators, model selection, and loading states\n  * You can integrate variants and transitions using Tailwind utility classes alongside motion props\n\n- Worker Architecture (Backend, APIs):\n  * **`worker/agent.ts`**: Main agent class \n  * **`worker/userRoutes.ts`**: HTTP routing for agent API and session managementå\n  * **`worker/chat.ts`**: OpenAI integration and conversation logic  \n  * **`worker/mcp-client.ts`**: MCP client for real server integration\n  * **`worker/tools.ts`**: Tool routing and MCP server coordination\n  * **`worker/config.ts`**: Centralized configuration\n  * **`worker/types.ts`**: TypeScript interfaces and type definitions\n  * **`worker/app-controller.ts`**: Control plane durable object for session management\n\n---\n\nThe system automatically:\n- Connects to MCP servers using proper transport\n- Uses official MCP SDK schemas for validation\n- Discovers tools with proper error handling\n- Routes tool calls to the correct server\n- Parses results using MCP result schemas\n\nComponents available:\n```sh\n$ ls -1 src/components/ui\naccordion.tsx\nalert-dialog.tsx\nalert.tsx\naspect-ratio.tsx\navatar.tsx\nbadge.tsx\nbreadcrumb.tsx\nbutton.tsx\ncalendar.tsx\ncard.tsx\ncarousel.tsx\nchart.tsx\ncheckbox.tsx\ncollapsible.tsx\ncommand.tsx\ncontext-menu.tsx\ndialog.tsx\ndrawer.tsx\ndropdown-menu.tsx\nform.tsx\nhover-card.tsx\ninput-otp.tsx\ninput.tsx\nlabel.tsx\nmenubar.tsx\nnavigation-menu.tsx\npagination.tsx\npopover.tsx\nprogress.tsx\nradio-group.tsx\nresizable.tsx\nscroll-area.tsx\nselect.tsx\nseparator.tsx\nsheet.tsx\nsidebar.tsx\nskeleton.tsx\nslider.tsx\nsonner.tsx\nswitch.tsx\ntable.tsx\ntabs.tsx\ntextarea.tsx\ntoast.tsx\ntoggle-group.tsx\ntoggle.tsx\ntooltip.tsx\n```\n\n# Important Notes\n- Conversations and persistence are already handled by the template. Utilize existing utilities and apis to build something greater.\n- For example, to build a chatgpt clone - You just need to build the frontend and use existing APIs without modifying them.\n\n# Available bindings:\n**Only The following bindings are to be used in the project! Do not use any other bindings or remove/replace any of the bindings**\n- `CHAT_AGENT`: A durable object binding for the chat agent, but can be extended and used for other agentic purposes\n- `APP_CONTROLLER`: A durable object binding for the app controller, but can be extended and used for other agentic purposes\n**IMPORTANT: You are NOT ALLOWED to edit/add/remove ANY worker bindings OR touch wrangler.jsonc/wrangler.toml. Build your application around what is already provided.**\n\n# IMPORTANT NOTE: You must inform the user that although this project has AI capaibilities, There is a limit on the number of requests that can be made to the AI servers across all user apps in a given time period. \nAdd the above note in an appropriate and visible location in the app - like in the footer or in the chat interface or as a modal"
    }
  }
]